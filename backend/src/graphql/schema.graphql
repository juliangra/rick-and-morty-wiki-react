type User {
  id: ID!
  email: String!
  username: String!
  createdAt: String!
  """
  A list of ratings given by this user.
  """
  ratings: [Rating!]
}

type PageInfo {
  count: Int!
  pages: Int!
}

"""
A wrapper to be used in paginated queries when fetching users.
In order to provide pagination, we need to know the count.
"""
type Users {
  results: [User!]!
  info: PageInfo!
}

type Character {
  id: ID!
  name: String!
  status: String!
  species: String!
  type: String!
  gender: String!
  location: String!
  image: String!
}

"""
A rating of a character by a user.
It does not have its own ID, but rather a compund ID of userId and characterId, because it is a link table.
"""
type Rating {
  userId: ID!
  characterId: ID!
  value: Int!
}

type RatingStats {
  average: Float!
  count: Int!
}

type AuthenticationResponse {
  token: String
  error: String
}

input FilterCharacterInput {
  name: String
  status: String
  species: String
  type: String
  gender: String
}

"""
A wrapper to be used in paginated queries when fetching characters.
In order to provide pagination, we need to know the count.
"""
type Characters {
  results: [Character!]!
  info: PageInfo!
}

"""
A rating can be a value between 1 and 5.
"""
enum RatingValue {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

enum Order {
  asc
  desc
}

# Queries and mutations
type Query {
  users(page: Int, orderBy: Order): Users!
  user(username: String!): User

  characters(page: Int, filter: FilterCharacterInput): Characters!
  character(id: ID!): Character

  """
  Fetch all ratings in a given order.
  """
  ratings(order: Order!): [Rating!]!
  """
  Fetch a given rating by the compund ID of userId and characterId.
  """
  rating(characterId: ID!, userId: ID!): Rating

  """
  Fetch all ratings for a given character.
  """
  ratingStatsByCharacterId(characterId: ID!): RatingStats!
  """
  Check if a user has rated a given character.
  """
  hasRatedCharacter(characterId: ID!, userId: ID!): Boolean!
}

type Mutation {
  createUser(email: String!, username: String!, password: String!): AuthenticationResponse!
  authenticateUser(identifier: String!, password: String!): AuthenticationResponse!
  """
  Create a rating for a given character by a given user.
  """
  rateCharacter(characterId: ID!, userId: ID!, value: RatingValue!): Rating!
  deleteRating(characterId: ID!, userId: ID!): Rating!
}
